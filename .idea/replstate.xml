<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1459201130281">{:repl-history {:ide [], :local [&quot;(defn foo [x]\n       (pp/cl-format nil \&quot;~1,8T~F~1,8T~F~1,8T~F\&quot;\n               (* 10 x) x (* 100 x))) &quot; &quot;(foo 2)&quot; &quot;(map #(pp/cl-format ~4F %) (samples 3))&quot; &quot;(map #(pp/cl-format ~4,1F %) (samples 3))&quot; &quot;(map #(pp/cl-format \&quot; ~4,1F\&quot; %) (first (samples 3)))&quot; &quot;;(map #(pp/cl-format \&quot; ~4,1F\&quot; %) (first (samples 3)))&quot; &quot;(first (samples 3))&quot; &quot;(map #(pp/cl-format \&quot; ~4,1F\&quot; %) (samples 3))&quot; &quot;(map #(pp/cl-format \&quot; ~4,1F\&quot; %) (vec (samples 3)))&quot; &quot;(pp/cl-format \&quot; ~4,1F\&quot; (first (samples 3))) &quot; &quot;(pp/cl-format \&quot; ~F\&quot; (first (samples 3))) &quot; &quot;(clean-builds)&quot; &quot;(pp/cl-format nil \&quot; ~F\&quot; (first (samples 3))) &quot; &quot;(pp/cl-format nil \&quot; ~4.2F\&quot; (first (samples 3))) &quot; &quot;(pp/cl-format nil \&quot; ~4,2F\&quot; (first (samples 3))) &quot; &quot;(pp/cl-format nil \&quot; ~4,1F\&quot; (samples 3)) &quot; &quot;(map #(pp/cl-format nil \&quot; ~4,1F\&quot; %) (samples 3)) &quot; &quot;(apply str (map #(pp/cl-format nil \&quot; ~4,1F\&quot; %) (samples 3))) &quot; &quot;(apply str (map #(pp/cl-format nil \&quot; ~4F\&quot; %) (samples 3))) &quot; &quot;(drop 1 (apply str (map #(pp/cl-format nil \&quot; ~4F\&quot; %) (samples 3)))) &quot; &quot;(s/join (drop 1 (apply str (map #(pp/cl-format nil \&quot; ~4F\&quot; %) (samples 3))))) &quot; &quot;(pp/print-table ( [:a :b] [{:a 1 :b 2 :c 3} {:a 4 :b 5 :c 6}]))&quot; &quot;(pp/print-table ( [:a :b :c] [{:a 1 :b 2 :c 3} {:a 4 :b 5 :c 6}]))&quot; &quot;(pp/print-table [:a :b :c] [{:a 1 :b 2 :c 3} {:a 4 :b 5 :c 6}])&quot; &quot;(ns demo\n  (:require [cljx-sampling.random :as random]\n            [cljx-sampling.core :refer [sample]]))&quot; &quot;(def rng (random/create))&quot; &quot;(def rng (random/create \&quot;seed\&quot;))&quot; &quot;(random/next-boolean! rng)&quot; &quot;(random/next-int! rng)&quot; &quot;(random/next-int! rng 3)&quot; &quot;(sample (range 5))&quot; &quot;(take 10 (sample (range 5) :replace true))&quot; &quot;(take 10 (sample (range 5)))&quot; &quot;(pp/pprint (samples 3))&quot; &quot;(samples 3)&quot; &quot;(sim-risk)&quot; &quot;(rand)&quot; &quot;(def rng (random/create 42))&quot; &quot;(rand01)&quot; &quot;(centiles)&quot; &quot;(take 1 (sample centiles))&quot; &quot;(take 3 (uniform-sample-on (sample centiles)))&quot; &quot;(take 3 (sample centiles))&quot; &quot;(take 30 (sample centiles))&quot; &quot;(take 3 (sample-%))&quot; &quot;(sample-% 3)&quot; &quot;(sample-% 6)&quot; &quot;(format 0.3)&quot; &quot;(format 98)&quot; &quot;(def foo 1)&quot; &quot;(vswap! foo 2)&quot; &quot;(swap! foo 2)&quot; &quot;(set! foo 2)&quot; &quot;(set! foo 3)&quot; &quot;foo&quot; &quot;(format 99.7)&quot; &quot;(sample-% 2)&quot; &quot;(sample-% 20)&quot; &quot;(sample-% 30)&quot; &quot;centiles&quot; &quot;(sample-% 4)&quot; &quot;(sample-% 40)&quot; &quot;(sample-% 50)&quot; &quot;(reduce + 0 (range 10000000))&quot; &quot;(sample-% 1)&quot; &quot;(samples)&quot; &quot;samples&quot; &quot;(take 2 (repeatedly #(sample-% 100)))&quot; &quot;(deconstruct '[x [2 3]])&quot; &quot;(clojure.core/deconstruct '[x [2 3]])&quot; &quot;(cljs.core/deconstruct '[x [2 3]])&quot; &quot;(destructure '[x [2 3]])&quot; &quot;(take-m-n-samples 2 2)&quot; &quot;(take-m-n-samples 1 100)&quot; &quot;(take-m-n-samples 2 100)&quot; &quot;(sample-% 100)&quot; &quot;(formatted-% 1)&quot; &quot;(formatted-% 2)&quot; &quot;(formatted-% 100)&quot; &quot;(take 2 (repeatedly (formatted-% 100)))&quot; &quot;(take 2 (repeatedly (formatted 100)))&quot; &quot;(take 2 (repeatedly #(formatted 100)))&quot; &quot;(formatted 100)&quot; &quot;(blocked-samples 3 100)&quot; &quot;(blocked-samples 3 1)&quot; &quot;(blocked-samples 3 10)&quot; &quot;(blocked-samples 3 2)&quot; &quot;(blocked-samples 30 2)&quot; &quot;(blocked-samples 30 20)&quot; &quot;(blocked-samples 30 100)&quot; &quot;(blocked-samples 100 100)&quot; &quot;(formatted 10)&quot; &quot;(blocked-samples 10 10)&quot; &quot;(sampled 1)&quot; &quot;(sampled 10)&quot; &quot;(partition 10 (sampled 100))&quot; &quot;(partition 20 (sampled 100))&quot; &quot;(sampled 3)&quot; &quot;(decorated 2)&quot; &quot;(decorated 1)&quot; &quot;(risk-category 90)&quot;], :remote []}}</component>
</project>